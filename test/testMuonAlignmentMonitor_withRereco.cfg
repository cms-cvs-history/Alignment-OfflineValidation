process MuonAlignmentMonitor =  {

  // Input reco file
  source = PoolSource {

	//AlCaReco File
    untracked vstring fileNames = {"rfio:/castor/cern.ch/user/j/jfernan2/AlCaReco_5000Zmumu_152.root"}   
 }
   untracked PSet maxEvents = {untracked int32 input = -1}

 
# Messages
  include "FWCore/MessageLogger/data/MessageLogger.cfi"

# don't refit Tracker Tracks
  include "RecoTracker/TransientTrackingRecHit/data/TransientTrackingRecHitBuilderWithoutRefit.cfi"

# MuonSeed
    include "RecoMuon/MuonSeedGenerator/data/standAloneMuonSeeds.cff"

# Standalone muon producer
    include "RecoMuon/StandAloneMuonProducer/data/standAloneMuons.cff"

# Global muon producer
    include "RecoMuon/GlobalMuonProducer/data/globalMuons.cff"
#replace globalMuons.MuonTrajectoryAvailable =false
replace globalMuons.GLBTrajBuilderParameters.TkTrajectoryAvailable =false
replace globalMuons.TrackerCollectionLabel = AlignmentMuons:TrackerOnly #AlCaReco Muon Tracker collection
replace globalMuons.GLBTrajBuilderParameters.TrackRecHitBuilder = "WithoutRefit"
replace globalMuons.GLBTrajBuilderParameters.TrackTransformer.TrackerRecHitBuilder ="WithoutRefit"


// Apply alignment/misalignment
// Reading from DB
/*  include "CondCore/DBCommon/data/CondDBCommon.cfi"

   replace CondDBCommon.connect = "sqlite_file:Alignments.db"
   replace CondDBCommon.catalog = "file:conddbcatalog.xml"
   
  es_source = PoolDBESSource { 
  	using CondDBCommon
	VPSet toGet = {
 { string record = "DTAlignmentRcd" string tag = "DT100InversepbScenario" },
 { string record = "DTAlignmentErrorRcd" string tag = "DT100InversepbScenarioErrors" },
 { string record = "CSCAlignmentRcd" string tag = "CSC100InversepbScenario" },
 { string record = "CSCAlignmentErrorRcd" string tag = "CSC100InversepbScenarioErrors" }

#{ string record = "DTAlignmentRcd" string tag = "DT10InversepbScenario" },
#{ string record = "DTAlignmentErrorRcd" string tag = "DT10InversepbScenarioErrors" },
#{ string record = "CSCAlignmentRcd" string tag = "CSC10InversepbScenario" },
#{ string record = "CSCAlignmentErrorRcd" string tag = "CSC10InversepbScenarioErrors" }
	}
 }
    replace DTGeometryESModule.applyAlignment = true
    replace CSCGeometryESModule.applyAlignment = true
*/

  // Analysis module
 module MuonAlignmentMonitor = MuonAlignmentAnalyzer {
        untracked string DataType = "RealData"
#	To do resolution plots:	
#       untracked string DataType = "SimData" # needs g4SimHits!!!

	untracked bool   doSAplots = true
        InputTag StandAloneTrackCollectionTag =  standAloneMuons

	untracked bool	 doGBplots = true
        InputTag GlobalMuonTrackCollectionTag = globalMuons

        untracked bool   doResplots = true
	InputTag RecHits4DDTCollectionTag = dt4DSegments
        InputTag RecHits2DCSCCollectionTag = cscSegments

 }

  service = TFileService { 
    string fileName = "MuonAlignmentMonitor.root"
  }

     path p = {MuonSeed,standAloneMuons,globalMuons,MuonAlignmentMonitor}
}
